
package com.company;
import java.util.*;

public class Unplanned {
    protected int numberOfNodes;//Variable to hold the number of nodes
    protected int numberOfDropBoxes;//Variable to hold the number of DropBoxes
    protected double [][]pathWayMatrix;//2-D array to hold the distance of the nodes
    protected int numberOfTowers;//Variable to hold the number of towers
    //Method to get the required values of the Heuristic
    public void getValues(){
        Scanner scanner=new Scanner(System.in);
        System.out.println("Enter the number of Drop Boxes:");
        numberOfDropBoxes=scanner.nextInt();
        System.out.println("Enter the number of DTN Nodes:");
        numberOfNodes=scanner.nextInt();
        pathWayMatrix=new double[numberOfNodes+1][numberOfNodes+1];
        System.out.println("Enter the Pathway Matrix:");
        for(int i=1;i<=numberOfNodes;i++){
            for(int j=1;j<=numberOfNodes;j++){
                pathWayMatrix[i][j]=scanner.nextDouble();
            }
        }
    }
    //Method to set the Location of the tower
    public int mcsLocation() {
        Scanner scanner=new Scanner(System.in);
        System.out.println("Enter the MCS Location");
        int randomNum = scanner.nextInt();//ThreadLocalRandom.current().nextInt(1, numberOfNodes + 1);
        return  randomNum;//Returns the Random Tower Which is to be placed
    }
    //Method to set the number of towers
    public  void setNumberOfTowers(){
        Scanner scanner=new Scanner(System.in);
        System.out.println("Enter the number of available Towers:");
        numberOfTowers=scanner.nextInt();
    }
    //Method to place remaining Towers
    public void placeRemainingTowers(int towerLocation){
        HashMap<Integer,Double> placed=new HashMap<>();
        setNumberOfTowers();//Set the Number of Towers
        int []towers=new int[numberOfTowers+1];
        Arrays.fill(towers,0);
        towers[1]=towerLocation;
        for(int i=2;i<=numberOfTowers;i++){
            double distance= Integer.MIN_VALUE;
            int minIndex=0;
            for(int j=1;j<=numberOfNodes;j++){
                if(pathWayMatrix[towers[1]][j]>distance && !placed.containsKey(j)){
                    distance=pathWayMatrix[towers[1]][j];
                    minIndex=j;
                }
            }
            placed.put(minIndex,distance);
            towers[i]=minIndex;
        }
        displayTower(towers);
        createClusters(towers);
    }
    //Method to create the Clusters Not like the K-Medoid Clustering
    public void createClusters(int []towers){
        int []clusters=new int[numberOfNodes+1];
        int minIndex=0;
        //Clustering done here
        for (int i=1;i<=numberOfNodes;i++){
            double MIN=Integer.MAX_VALUE;
            for(int j=1;j<towers.length;j++){
                if(pathWayMatrix[i][towers[j]]<MIN){
                    MIN=pathWayMatrix[i][towers[j]];
                    minIndex=towers[j];
                }
            }
            clusters[i]=minIndex;//Clustering done here
        }
        for(int i=1;i<towers.length;i++){
            System.out.print(towers[i]+ " ( ");
            for(int j=1;j<=numberOfNodes;j++){
                if(towers[i]==clusters[j]){
                    System.out.print(j+ " ");
                }
            }
            System.out.println(") ");
        }
        trajectory(towers,clusters);
    }

    //Method to define the trajectory of the Data Mule
    public  void trajectory(int[] tower,int[] tempclusters)
    {
        int n=tempclusters.length-1;
        int k=tower.length-1;
        System.out.println("\nenter no. of mules");
        Scanner scan=new Scanner(System.in);

        int mules=scan.nextInt();
        int[] alotted_mules=new int[k+1];

        int divide=(int)Math.floor(mules/k);

        //Finding cost of cluster
        double[] cost=new double[k+1];

        for(int i=1;i<=k;i++)
        {
            for(int j=1;j<=n;j++)
            {
                int pos=tower[i];
                if(tempclusters[j]==pos && j!=pos)
                {
                    cost[i]+=pathWayMatrix[pos][j];
                }
            }
        }


   		/*for(int i=1;i<=k;i++)
   		{
   			System.out.print(cost[i]+" ");
   		}*/

        //finding number of nodes in each cluster
        int[] nodes_in_cluster=new int[k+1];
        for(int i=1;i<=k;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(tempclusters[j]==tower[i])
                {
                    nodes_in_cluster[i]++;
                }
            }
        }

        //finding highest cost cluster
        double max=0;
        int highest_cost_cluster=0;
        for(int i=1;i<=k;i++)
        {
            if(cost[i]>max)
            {
                max=cost[i];
                highest_cost_cluster=i;
            }
        }

        int mules1=mules;
        //uniform mule distribution
        for(int i=1;i<=k;i++)
        {
            if(i!=highest_cost_cluster)
            {
                alotted_mules[i]=divide;
                mules1-=divide;
            }
        }
        alotted_mules[highest_cost_cluster]=mules1;

        System.out.println("\nUniform mule distribution as");
        for(int i=1;i<=k;i++)
        {
            System.out.println("Cluster "+i+ "= "+ alotted_mules[i]);
        }
        System.out.println();


        //initial location of mules
        int[] mule_location=new int[mules+1];
        int[] initial_mule_location=new int[mules+1];
        int j=1;

        for(int i=1;i<=k;i++)
        {
            int x=alotted_mules[i];
            while(x>0)
            {
                mule_location[j]=tower[i];
                initial_mule_location[j]=tower[i];
                x--;
                j++;
            }
        }

        System.out.println("Initial mules location");
        for(int i=1;i<=mules;i++)
        {
            System.out.println("mule "+i+" -> "+mule_location[i]);
        }
        System.out.println();

        //finding the trajectories of each mule
        int x=n-k;
        double min=99999.0;
        int index=-1;
        int[] visited=new int[n+1];

        ArrayList<Queue<Integer>> path=new ArrayList<Queue<Integer>>(mules+1);
        for(int i=0;i<=mules;i++)
        {
            Queue<Integer> temp=new LinkedList<Integer>();
            path.add(temp);
        }

        for(int i=1;i<=mules;i++)
        {
            path.get(i).add(initial_mule_location[i]);
        }
        //System.out.println(path.size());

        for(int i=1;i<=k;i++)
        {
            visited[tower[i]]=1;
        }

        while(x>0)
        {
            for(j=1;j<=mules;j++)
            {
                if(x<=0)
                    break;

                min=99999.0;
                index=-1;

                for(int i=1;i<=n;i++)
                {
                    if(i!=tempclusters[i] && tempclusters[i]==tempclusters[mule_location[j]] && visited[i]==0 && pathWayMatrix[mule_location[j]][i]<=min)
                    {
                        min=pathWayMatrix[mule_location[j]][i];
                        index=i;
                    }
                }
                if(index!=-1)
                {
                    mule_location[j]=index;
                    //System.out.println(j);
                    path.get(j).add(index);
                    visited[index]=1;
                    x--;
                }
            }

        }

   		/*for(int i=1;i<=n;i++)
   		{
   			System.out.print(visited[i]+" ");
   		}*/

        for(int i=1;i<=mules;i++)
        {
            path.get(i).add(initial_mule_location[i]);
        }

        System.out.println("Path of each mule");

        for(int i=1;i<=mules;i++)
        {
            System.out.println(path.get(i));
        }

        System.out.println("\nEnter velocity(km/h) of DM");
        int velocity=scan.nextInt();

        int temp1=0,temp2=0;
        double dist;
        for(int i=0;i<path.size();i++)
        {
            if(path.get(i).size()>0)
                temp1=path.get(i).remove();

            dist=0;
            while(path.get(i).size()>0)
            {
                temp2=path.get(i).remove();

                dist+=pathWayMatrix[temp1][temp2];

                temp1=temp2;
            }
            if(dist>max)
            {
                max=dist;
                index=i;
            }
        }

        System.out.println();
        System.out.println("mule "+index+" having highest latency cost, hence overall latency of the scnerio is = "+(max/velocity)*60+" seconds\n");
        //System.out.println(max);
        //System.out.println(divide);
    }
    //Method to Uniformly Distribute the Data Mules In the Clusters
    public int[]  uniformDataMuleDistribution(int []centers){
        Scanner scan=new Scanner(System.in);
        System.out.println("Enter the number of data Mules: ");
        int numberOfDataMules=scan.nextInt();
        int []dataMulesDistribution=new int[centers.length];
        int sum=0;
        Arrays.fill(dataMulesDistribution,0);
        for(int i=1;i<centers.length-1;i++){
            dataMulesDistribution[i]=numberOfDataMules/(centers.length-1);//Distribution Done here
            sum+=dataMulesDistribution[i];
        }
        dataMulesDistribution[centers.length-1]=numberOfDataMules-sum;//The last cluster has the remaining Data Mules
        return dataMulesDistribution;
    }

    //Method to Display the Towers
    public void displayTower(int []towers){
        System.out.println("Towers are at locations:");
        for(int i=1;i<towers.length;i++){
            System.out.println("Tower "+i+" is at "+towers[i]);
        }
    }
    //Main Method To call all the required Methods
    public static void main(String[] args) {
        Unplanned unplanned=new Unplanned();
        unplanned.getValues();
        int towerLocation=unplanned.mcsLocation();
        unplanned.placeRemainingTowers(towerLocation);
    }

}
